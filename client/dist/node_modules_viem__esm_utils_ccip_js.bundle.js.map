{"version":3,"file":"node_modules_viem__esm_utils_ccip_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAkD;AACZ;AACF;AAC7B,kCAAkC,+CAAS;AAClD,kBAAkB,yDAAyD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iDAAM,MAAM;AAC5D;AACA,6BAA6B,OAAO;AACpC,2BAA2B,KAAK;AAChC,wCAAwC,iBAAiB;AACzD,iCAAiC,UAAU;AAC3C;AACA;AACA,SAAS;AACT;AACA;AACO,mDAAmD,+CAAS;AACnE,kBAAkB,aAAa;AAC/B;AACA;AACA,gCAAgC,iDAAM,MAAM;AAC5C,6BAA6B,8DAAS,SAAS;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACO,gDAAgD,+CAAS;AAChE,kBAAkB,YAAY;AAC9B;AACA;AACA,qCAAqC,GAAG;AACxC,kDAAkD,OAAO;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;AC/C+D;AACpB;AACpC;AACP,SAAS,wDAAS,MAAM,eAAe;AACvC,kBAAkB,mEAAmB,GAAG,YAAY;AACpD,SAAS,wDAAS,MAAM,eAAe;AACvC,kBAAkB,mEAAmB,GAAG,YAAY;AACpD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACTiD;AACiF;AACzE;AACM;AACI;AACN;AACnB;AACF;AACG;AACpC;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACO,wCAAwC,kCAAkC;AACjF,YAAY,OAAO,EAAE,4EAAiB;AACtC;AACA;AACA,KAAK;AACL;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA,aAAa,0EAAc;AAC3B,sBAAsB,8EAAiC,GAAG,YAAY;AACtE,4CAA4C,8BAA8B;AAC1E,gBAAgB,cAAc,QAAQ,6DAAI;AAC1C;AACA;AACA,kBAAkB,uDAAM;AACxB;AACA,gBAAgB,gFAAmB,IAAI,eAAe,IAAI,eAAe;AACzE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB,gEAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO,6BAA6B,qBAAqB;AACzD;AACA,oBAAoB,iBAAiB;AACrC;AACA,sCAAsC,KAAK;AAC3C,2CAA2C,eAAe;AAC1D;AACA,uDAAuD,OAAO,qBAAqB,KAAK;AACxF;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAgB;AAC5C;AACA;AACA,0BAA0B,wDAAS;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB,qDAAK;AACtB,4BAA4B,iFAAoC;AAChE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA","sources":["webpack://client/./node_modules/viem/_esm/errors/ccip.js","webpack://client/./node_modules/viem/_esm/utils/address/isAddressEqual.js","webpack://client/./node_modules/viem/_esm/utils/ccip.js"],"sourcesContent":["import { stringify } from '../utils/stringify.js';\nimport { BaseError } from './base.js';\nimport { getUrl } from './utils.js';\nexport class OffchainLookupError extends BaseError {\n    constructor({ callbackSelector, cause, data, extraData, sender, urls, }) {\n        super(cause.shortMessage ||\n            'An error occurred while fetching for an offchain result.', {\n            cause,\n            metaMessages: [\n                ...(cause.metaMessages || []),\n                cause.metaMessages?.length ? '' : [],\n                'Offchain Gateway Call:',\n                urls && [\n                    '  Gateway URL(s):',\n                    ...urls.map((url) => `    ${getUrl(url)}`),\n                ],\n                `  Sender: ${sender}`,\n                `  Data: ${data}`,\n                `  Callback selector: ${callbackSelector}`,\n                `  Extra data: ${extraData}`,\n            ].flat(),\n            name: 'OffchainLookupError',\n        });\n    }\n}\nexport class OffchainLookupResponseMalformedError extends BaseError {\n    constructor({ result, url }) {\n        super('Offchain gateway response is malformed. Response data must be a hex value.', {\n            metaMessages: [\n                `Gateway URL: ${getUrl(url)}`,\n                `Response: ${stringify(result)}`,\n            ],\n            name: 'OffchainLookupResponseMalformedError',\n        });\n    }\n}\nexport class OffchainLookupSenderMismatchError extends BaseError {\n    constructor({ sender, to }) {\n        super('Reverted sender address does not match target contract address (`to`).', {\n            metaMessages: [\n                `Contract address: ${to}`,\n                `OffchainLookup sender address: ${sender}`,\n            ],\n            name: 'OffchainLookupSenderMismatchError',\n        });\n    }\n}\n//# sourceMappingURL=ccip.js.map","import { InvalidAddressError, } from '../../errors/address.js';\nimport { isAddress } from './isAddress.js';\nexport function isAddressEqual(a, b) {\n    if (!isAddress(a, { strict: false }))\n        throw new InvalidAddressError({ address: a });\n    if (!isAddress(b, { strict: false }))\n        throw new InvalidAddressError({ address: b });\n    return a.toLowerCase() === b.toLowerCase();\n}\n//# sourceMappingURL=isAddressEqual.js.map","import { call } from '../actions/public/call.js';\nimport { OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError, } from '../errors/ccip.js';\nimport { HttpRequestError, } from '../errors/request.js';\nimport { decodeErrorResult } from './abi/decodeErrorResult.js';\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js';\nimport { isAddressEqual } from './address/isAddressEqual.js';\nimport { concat } from './data/concat.js';\nimport { isHex } from './data/isHex.js';\nimport { stringify } from './stringify.js';\nexport const offchainLookupSignature = '0x556f1830';\nexport const offchainLookupAbiItem = {\n    name: 'OffchainLookup',\n    type: 'error',\n    inputs: [\n        {\n            name: 'sender',\n            type: 'address',\n        },\n        {\n            name: 'urls',\n            type: 'string[]',\n        },\n        {\n            name: 'callData',\n            type: 'bytes',\n        },\n        {\n            name: 'callbackFunction',\n            type: 'bytes4',\n        },\n        {\n            name: 'extraData',\n            type: 'bytes',\n        },\n    ],\n};\nexport async function offchainLookup(client, { blockNumber, blockTag, data, to, }) {\n    const { args } = decodeErrorResult({\n        data,\n        abi: [offchainLookupAbiItem],\n    });\n    const [sender, urls, callData, callbackSelector, extraData] = args;\n    const { ccipRead } = client;\n    const ccipRequest_ = ccipRead && typeof ccipRead?.request === 'function'\n        ? ccipRead.request\n        : ccipRequest;\n    try {\n        if (!isAddressEqual(to, sender))\n            throw new OffchainLookupSenderMismatchError({ sender, to });\n        const result = await ccipRequest_({ data: callData, sender, urls });\n        const { data: data_ } = await call(client, {\n            blockNumber,\n            blockTag,\n            data: concat([\n                callbackSelector,\n                encodeAbiParameters([{ type: 'bytes' }, { type: 'bytes' }], [result, extraData]),\n            ]),\n            to,\n        });\n        return data_;\n    }\n    catch (err) {\n        throw new OffchainLookupError({\n            callbackSelector,\n            cause: err,\n            data,\n            extraData,\n            sender,\n            urls,\n        });\n    }\n}\nexport async function ccipRequest({ data, sender, urls, }) {\n    let error = new Error('An unknown error occurred.');\n    for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        const method = url.includes('{data}') ? 'GET' : 'POST';\n        const body = method === 'POST' ? { data, sender } : undefined;\n        try {\n            const response = await fetch(url.replace('{sender}', sender).replace('{data}', data), {\n                body: JSON.stringify(body),\n                method,\n            });\n            let result;\n            if (response.headers.get('Content-Type')?.startsWith('application/json')) {\n                result = (await response.json()).data;\n            }\n            else {\n                result = (await response.text());\n            }\n            if (!response.ok) {\n                error = new HttpRequestError({\n                    body,\n                    details: result?.error\n                        ? stringify(result.error)\n                        : response.statusText,\n                    headers: response.headers,\n                    status: response.status,\n                    url,\n                });\n                continue;\n            }\n            if (!isHex(result)) {\n                error = new OffchainLookupResponseMalformedError({\n                    result,\n                    url,\n                });\n                continue;\n            }\n            return result;\n        }\n        catch (err) {\n            error = new HttpRequestError({\n                body,\n                details: err.message,\n                url,\n            });\n        }\n    }\n    throw error;\n}\n//# sourceMappingURL=ccip.js.map"],"names":[],"sourceRoot":""}